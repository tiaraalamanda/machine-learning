# -*- coding: utf-8 -*-
"""Kel10_6161901025_Claresta_6161901028_Christian_6161901051_Fransiska_6161901116_Tiara.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E5vSFIzHz5-VSdznYGdJcfwoHraK4-Xr

# UTS Pemodelan Data dengan Python Kelompok 10

Kelompok 10 :

1. Claresta Tirta S. G (6161901025)
2. Christian Jauhari (6161901028)
3. Fransiska Nadya C. P (6161901051)
4. Tiara Alamanda (6161901116)

# Preprocessing Data

**Load Data**
"""

import pandas as pd
df = pd.read_csv("Heart Disease.csv")
df

"""Sebelumnya sudah di load data csv mengenai sejumlah data terkait penyebab penyakit jantung dan sudah dimasukkan ke dalam variable df. Data ini berjumlah 4240 baris dan 16 kolom.

**Langkah-langkah Persiapan Data**
"""

df.info()

"""Lalu dengan menggunakan df.info(), dapat dilihat untuk kolom seperti Education, cigsPerDay, BPMeds, totChol, BMI, heartRate, dan glucose terdapat data yang bernilai Null (data kosong) karena jumlah baris yang ditunjukkan tidak sama dengan jumlah baris pada data awal, yaitu 4240 baris. Dapat diperhatikan pula tipe data dari masing-masing kolom."""

df.describe()

df = df.drop(columns=['education', 'cigsPerDay', 'BPMeds', 'prevalentStroke', 'prevalentHyp'])
df

"""Kelompok kami memutuskan untuk menghapus kolom education, cigsPerDay, BPMeds, prevalentStroke, dan prevalentHyp. Kolom education dihapus karena menurut kami, pendidikan tidak ada hubungannya dengan penyakit jantung. Lalu, kami menghapus kolom cigsPerDay, BPMeds, prevalentStroke, dan prevalentHyp karena bisa diketahui dari kolom yang lain.

**Cek Nilai NA pada tiap baris**
"""

persentase_data_kosong= df.isna().sum()*100/len(df)
nilaikosong_df= pd.DataFrame({'Persentase Data Kosong': persentase_data_kosong})
nilaikosong_df

"""Setelah menghapus kolom, disini akan dicek kembali jika terdapat data yang Null."""

df=df.dropna()
df

"""Pada bagian ini, kami memutuskan untuk menghapus baris yang terdapat nilai Null. Sehingga diperoleh data yang baru dengan jumlah baris adalah 3827 dan jumlah kolom adalah 11.

# Visualisasi Regular

## Gender dari Survey
"""

import numpy as np
import matplotlib.pyplot as plt

index_gender = df.index[df['male']==1]

y = np.array([df['male'].value_counts()[0],df['male'].value_counts()[1]])
mylabels = ["Perempuan","Laki-laki"]
mycolors = ["orange","blue"]
myexplode = [0.2, 0]

plt.title('Persentase Sampel berdasarkan Gender dari data Survey')
plt.pie(y, labels = mylabels, colors = mycolors, autopct='%1.0f%%', pctdistance=0.5, labeldistance=1.2, shadow=True, startangle=90, explode = myexplode)
plt.show()

"""Dari piechart diatas, dapat dilihat bahwa sebesar 56% wanita dan 44% laki-laki yang mengikuti survey ini.

## Status Merokok dari Survey
"""

index_gender = df.index[df['currentSmoker']==1]

y = np.array([df['currentSmoker'].value_counts()[0],df['currentSmoker'].value_counts()[1]])
mylabels = ["Tidak Merokok","Merokok"]
mycolors = ["green","red"]
myexplode = [0.2, 0]

plt.title('Persentase Sampel berdasarkan Status Merokok dari data Survey')
plt.pie(y, labels = mylabels, colors = mycolors, autopct='%1.0f%%', pctdistance=0.5, labeldistance=1.2, shadow=True, startangle=90, explode = myexplode)
plt.show()

"""Dari piechart diatas, dapat dilihat bahwa sebesar 51% orang tidak merokok dan 49% orang merokok.

## Status Diabetes dari Survey
"""

index_gender = df.index[df['diabetes']==1]

y = np.array([df['diabetes'].value_counts()[0],df['diabetes'].value_counts()[1]])
mylabels = ["Tidak terkena Diabetes","Terkena Diabetes"]
mycolors = ["green","red"]
myexplode = [0.2, 0]

plt.title('Persentase Sampel berdasarkan Status Diabetes dari data Survey')
plt.pie(y, labels = mylabels, colors = mycolors, autopct='%1.0f%%', pctdistance=0.5, labeldistance=1.2, shadow=True, startangle=90, explode = myexplode)
plt.show()

"""Dari piechart diatas, dapat dilihat bahwa sebesar 97% orang tidak terkena diabetes dan 3% orang yang terkena diabetes.

**MASUKIN LAPORAN**

## TenYearCHD dari Survey
"""

index_CHD = df.index[df['TenYearCHD']==1]

y = np.array([df['TenYearCHD'].value_counts()[0],df['TenYearCHD'].value_counts()[1]])
mylabels = ["Tidak Berisiko Terkena Penyakit Jantung","Berisiko Terkena Jantung"]
mycolors = ["red","green"]
myexplode = [0.2, 0]

plt.title('Persentase Sampel yang Berisiko Terkena Penyakit Jantung')
plt.pie(y, labels = mylabels, colors = mycolors, autopct='%1.0f%%', pctdistance=0.5, 
        labeldistance=1.2, shadow=True, startangle=90, explode = myexplode)
plt.show()

"""Dari piechart diatas, dapat dilihat bahwa sebesar 85% orang yang tidak berpotensi memiliki penyakit jantung dan 15% orang yang berpotensi memiliki penyakit jantung.

# Visualisasi Kompleks
"""

import pandas as pd
df_TYCHD1 = pd.DataFrame(df['TenYearCHD']==1, columns= ['male'])
#print (df_TYCHD1)

TYCHD1 = df.loc[df['TenYearCHD'] == 1]
#print (TYCHD1)

"""## Histogram Umur (Survey) & Distribusi Normal"""

import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import norm
#create histogram with 4 bins
plt.hist(df['age'], facecolor = 'red',bins=25,alpha=0.6,edgecolor='black',linewidth=1,density=True)
xmin,xmax = plt.xlim()
x = np.linspace(xmin,xmax,100)
p = norm.pdf(x, np.mean(df['age']), np.std(df['age']))
plt.plot(x,p,'k',linewidth = 2)
plt.title('Histogram Umur dengan Distribusi Normal')
plt.show()

"""**MASUKIN LAPORAN**

## Histogram Umur (TenYearCHD) & Distribusi Normal
"""

plt.hist(TYCHD1['age'], facecolor = 'red',bins=25,alpha=0.6,edgecolor='black',linewidth=1,density=True)
xmin,xmax = plt.xlim()
x = np.linspace(xmin,xmax,100)
p = norm.pdf(x, np.mean(TYCHD1['age']), np.std(TYCHD1['age']))
plt.plot(x,p,'k',linewidth = 2)
plt.title('Peluang Memiliki Penyakit Jantung Berdasarkan Usia')
plt.xlabel("Usia")
plt.ylabel("Peluang memiliki penyakit jantung")
plt.show()

"""## Histogram BMI (Survey) & Distribusi Normal"""

import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import norm
#create histogram with 4 bins
plt.hist(df['BMI'], facecolor = 'red',bins=25,alpha=0.6,edgecolor='black',linewidth=1,density=True)
xmin,xmax = plt.xlim()
x = np.linspace(xmin,xmax,100)
p = norm.pdf(x, np.mean(df['BMI']), np.std(df['BMI']))
plt.plot(x,p,'k',linewidth = 2)
plt.title('Histogram BMI dengan Distribusi Normal')
plt.show()

"""**MASUKIN LAPORAN**

## Histogram BMI (TenYearCHD) & Distribusi Normal
"""

plt.hist(TYCHD1['BMI'], facecolor = 'red',bins=25,alpha=0.6,edgecolor='black',linewidth=1,density=True)
xmin,xmax = plt.xlim()
x = np.linspace(xmin,xmax,100)
p = norm.pdf(x, np.mean(TYCHD1['BMI']), np.std(TYCHD1['BMI']))
plt.plot(x,p,'k',linewidth = 2)
plt.title('Peluang Memiliki Penyakit Jantung Berdasarkan BMI')
plt.xlabel("BMI")
plt.ylabel("Peluang memiliki penyakit jantung")
plt.show()

"""**MASUKIN LAPORAN**

## TenYearCHD vs Gender
"""

y = np.array([TYCHD1['male'].value_counts()[0],TYCHD1['male'].value_counts()[1]])
mylabels = ["Perempuan","Laki-laki"]
mycolors = ["orange","blue"]
myexplode = [0.2, 0]

plt.title('Persentase risiko memiliki penyakit Jantung berdasarkan Jenis Kelamin')
plt.pie(y, labels = mylabels, colors = mycolors, autopct='%1.0f%%', pctdistance=0.5, 
        labeldistance=1.2, shadow=True, startangle=90, explode = myexplode)
plt.show()

"""Berdasarkan pie chart diatas, dapat dilihat bahwa berdasarkan jenis kelamin terdapat 47% perempuan dan 53% laki-laki yang berpeluang terkena penyakit jantung 10 tahun kedepan.

**MASUKIN LAPORAN**

## TenYearCHD vs Status Merokok
"""

y = np.array([TYCHD1['currentSmoker'].value_counts()[0],TYCHD1['currentSmoker'].value_counts()[1]])
mylabels = ["Tidak Merokok","Merokok"]
mycolors = ["green","red"]
myexplode = [0.2, 0]

plt.title('Persentase Risiko Memiliki Penyakit Jantung Berdasarkan Status Merokok')
plt.pie(y, labels = mylabels, colors = mycolors, autopct='%1.0f%%', pctdistance=0.5, 
        labeldistance=1.2, shadow=True, startangle=90, explode = myexplode)
plt.show()

"""Berdasarkan pie chart diatas, dapat dilihat bahwa berdasarkan status merokok terdapat 49% tidak merokok dan 51% merokok yang berpeluang terkena penyakit jantung 10 tahun kedepan.

**MASUKIN LAPORAN**

## TenYearCHD vs Status Diabetes
"""

y = np.array([TYCHD1['diabetes'].value_counts()[0],TYCHD1['diabetes'].value_counts()[1]])
mylabels = ["Tidak Memiliki Diabetes","Terkena Diabetes"]
mycolors = ["green","red"]
myexplode = [0.2, 0]

plt.title('Persentase Risiko Memiliki Penyakit Jantung Berdasarkan Status Diabetes')
plt.pie(y, labels = mylabels, colors = mycolors, autopct='%1.0f%%', pctdistance=0.5, labeldistance=1.2, shadow=True, startangle=90, explode = myexplode)
plt.show()

"""Berdasarkan pie chart diatas, dapat dilihat bahwa berdasarkan status diabetes terdapat 94% tidak terkena diabetes dan 6% terkena diabetes yang berpeluang terkena penyakit jantung 10 tahun kedepan.

## Data Survey dibagi berdasarkan Status Merokok, Status Diabetes, TenYearCHD
"""

import pandas as pd

S1 = df.loc[df['currentSmoker'] == 1]
S0 = df.loc[df['currentSmoker'] == 0]

S1D1 = S1.loc[S1['diabetes'] == 1]
S1D0 = S1.loc[S1['diabetes'] == 0]
S0D1 = S0.loc[S0['diabetes'] == 1]
S0D0 = S0.loc[S0['diabetes'] == 0]

S1D1TYCHD1 = S1D1.loc[S1D1['TenYearCHD'] == 1]
S1D1TYCHD0 = S1D1.loc[S1D1['TenYearCHD'] == 0]
S1D0TYCHD1 = S1D0.loc[S1D0['TenYearCHD'] == 1]
S1D0TYCHD0 = S1D0.loc[S1D0['TenYearCHD'] == 0]

S0D1TYCHD1 = S0D1.loc[S0D1['TenYearCHD'] == 1]
S0D1TYCHD0 = S0D1.loc[S0D1['TenYearCHD'] == 0]
S0D0TYCHD1 = S0D0.loc[S0D0['TenYearCHD'] == 1]
S0D0TYCHD0 = S0D0.loc[S0D0['TenYearCHD'] == 0]
#print (S0D0TYCHD1)

y = np.array([S1D1['TenYearCHD'].value_counts()[1],S1D1['TenYearCHD'].value_counts()[0],
              S1D0['TenYearCHD'].value_counts()[1],S1D0['TenYearCHD'].value_counts()[0],
              S0D1['TenYearCHD'].value_counts()[1],S0D1['TenYearCHD'].value_counts()[0],
              S0D0['TenYearCHD'].value_counts()[1],S0D0['TenYearCHD'].value_counts()[0]])
mylabels = ["S1D1TYCHD1", "S1D1TYCHD0", "S1D0TYCHD1", "S1D0TYCHD0", "S0D1TYCHD1",
            "S0D1TYCHD0", "S0D0TYCHD1", "S0D0TYCHD0"]
mycolors = ["#FFF700","#17becf","#951B00","#D52700","#e377c2","#AEFF00","#00FF6C","#004DFF"]
myexplode = [0.6, 0.4, 0.2, 0.2, 0.6, 0.4, 0.2, 0.2]

#plt.title('Persentase risiko memiliki penyakit Jantung berdasarkan Status Merokok dan riwayat Diabetes')
plt.pie(y, colors = mycolors, autopct='%.1f%%', pctdistance=0.5, labeldistance=1.2, 
        shadow=True, radius=2.7, startangle=90, explode = myexplode)
plt.legend(mylabels, loc='lower left')
plt.show()

"""## TenYearCHD dan Status Diabetes vs Gender"""

import pandas as pd
df_TYCHD3 = pd.DataFrame(TYCHD1['diabetes']==1, columns= ['male'])
#print (df_TYCHD3)

TYCHD3 = TYCHD1.loc[TYCHD1['diabetes'] == 1]
#print (TYCHD3)

y = np.array([TYCHD3['male'].value_counts()[0],TYCHD3['male'].value_counts()[1]])
mylabels = ["Perempuan","Laki-laki"]
mycolors = ["orange","blue"]
myexplode = [0.2, 0]

plt.title('Persentase Jenis Kelamin yang terkena Diabetes berdasarkan sampel yang berpeluang terkena Penyakit Jantung (10 Tahun Kedepan)')
plt.pie(y, labels = mylabels, colors = mycolors, autopct='%1.0f%%', pctdistance=0.5, labeldistance=1.2, shadow=True, startangle=90, explode = myexplode)
plt.show()

"""## TenYearCHD dan Status Merokok vs Diabetes"""

import pandas as pd
df_TYCHD2 = pd.DataFrame(TYCHD1['currentSmoker']==1, columns= ['diabetes'])
#print (df_TYCHD2)

TYCHD2 = TYCHD1.loc[TYCHD1['currentSmoker'] == 1]
#print (TYCHD2)

y = np.array([TYCHD2['diabetes'].value_counts()[0],TYCHD2['diabetes'].value_counts()[1]])
mylabels = ["Tidak Terkena Diabetes","Terkena Diabetes"]
mycolors = ["green","red"]
myexplode = [0.2, 0]

plt.title('Persentase orang terkena Diabetes yang Merokok berdasarkan sampel yang berpeluang terkena Penyakit Jantung (10 Tahun Kedepan)')
plt.pie(y, labels = mylabels, colors = mycolors, autopct='%1.0f%%', pctdistance=0.5, labeldistance=1.2, shadow=True, startangle=90, explode = myexplode)
plt.show()

"""## Tekanan Darah Sistolik, Diastolik vs BMI"""

# Import Library

import numpy as np 
import matplotlib.pyplot as plt 
  
# Define Data

x = df['BMI']
data_1 = df['sysBP']
data_2 = df['diaBP']
  
# Create Plot

fig, ax1 = plt.subplots() 
  
ax1.set_xlabel('BMI') 
ax1.set_ylabel('Tekanan Sistolik', color = 'blue') 
plot_1 = ax1.plot(x, data_1, color = 'blue', label='Tekanan Sistolik') 
ax1.tick_params(axis ='y', labelcolor = 'blue') 

# Adding Twin Axes

ax2 = ax1.twinx() 
  
ax2.set_ylabel('Tekanan Diastolik', color = 'orange') 
plot_2 = ax2.plot(x, data_2, color = 'orange', label = 'Tekanan Diastolik') 
ax2.tick_params(axis ='y', labelcolor = 'orange') 

# Add legends

lns = plot_1 + plot_2
labels = [l.get_label() for l in lns]
plt.legend(lns, labels, loc=0)
 
# Show plot
plt.title('Plot Data Sampel BMI dan Tekanan Darah')
plt.show()

# Tekanan Sistolik
x = df['sysBP']
y = df['BMI']
plt.scatter(x, y)

# Tekanan Diastolik
x = df['diaBP']
y = df['BMI']
plt.scatter(x, y)

plt.legend(('Tekanan Sistolik','Tekanan Diastolik'), loc='upper right')
plt.title('Data Sampel BMI dan Tekanan Darah dalam bentuk Scatter Plot')
plt.xlabel("BMI")
plt.ylabel("Tekanan Darah Sistolik dan Diastolik")
plt.show()

from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

fig = plt.figure(figsize=(7,6))
ax = fig.add_subplot(111, projection='3d')
ax.view_init(20, 120)
ax.scatter(df.BMI, df.heartRate, df.sysBP,  color='blue',lw=5)
ax.scatter(df.BMI, df.heartRate, df.diaBP, color='orange', marker='^', linewidth=3)
plt.legend(('Tekanan Sistolik','Tekanan Diastolik'), loc='center left')
ax.set_xlabel('BMI',fontsize=15)
ax.set_ylabel('Detak Jantung',fontsize=15)
ax.set_zlabel('Tekanan Darah', fontsize=15)
ax.set_title('Data Sampel BMI, Detak Jantung, dan Tekanan Darah dalam bentuk Scatter Plot', fontsize=15)
plt.show()

"""## Line Chart (Multiple Line)"""

# importing package
import matplotlib.pyplot as plt
import numpy as np
  
x = df["age"]
  
# plot lines
plt.plot(x, df["totChol"], label = "Total Kolestrol", linestyle=":", color="yellow")
plt.plot(x, df["sysBP"], label = "Tekanan Sistolik", linestyle="--", color="blue")
plt.plot(x, df["diaBP"], label = "Tekanan Diastolik", linestyle="--", color="orange")
plt.plot(x, df["BMI"], label = "BMI", linestyle="-", color="purple")
plt.plot(x, df["heartRate"], label = "Denyut Jantung", linestyle="dashed", color="black")
plt.plot(x, df["glucose"], label = "Kadar Glukosa", linestyle=":", color="green")
plt.legend()
plt.show()

"""## Regression Model

Yang harus dibuat:
1. Histogram umur (bandingkan dengan dist normal)
2. Histogram BMI
3. Histogram glukosa dan kolestrol
4. Pie chart tenyearchd
5. Pie chart current smoker
"""