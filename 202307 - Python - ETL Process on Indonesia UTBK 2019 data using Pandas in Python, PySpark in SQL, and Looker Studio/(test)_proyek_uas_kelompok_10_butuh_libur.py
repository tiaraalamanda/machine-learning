# -*- coding: utf-8 -*-
"""(TEST) Proyek UAS - Kelompok 10 Butuh Libur.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/171Hv6DLaUwRJl6U4-ZtJ6LouIlFPBsIV

# <center> Proyek UAS Kapita Selekta Statistika

---

**Kelompok 10 - Butuh Libur**

6161901066 - Dennis Imanuel\
6161901104 - Putu Lila Kusumayani \
6161901114 - Bilqis Aulia R.\
6161901116 - Tiara Alamanda

# Prepare SPARK
"""

# Instalasi pyspark
!pip install pyspark

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# import library PySpark
import requests
from pyspark.sql import SparkSession
from pyspark.sql.types import StructType, StructField, StringType, FloatType, IntegerType
from pyspark.sql.functions import avg, min, max, stddev, desc
from pyspark.sql.functions import col

# Membuat spark session
spark = SparkSession.builder.appName("Analisis Skor UTBK Sosilogi").getOrCreate()

"""# Pipeline ETL

### Extract Datasets from Kaggle
Pastikan bahwa telah mengupload File Kaggle API Token (dari menu kaggle.com/settings/account) account masing-masing terlebih dahulu yang didapatkan dengan cara "create new token".

NB: Pastikan File kaggle.json yang diupload adalah file token yang terbaru dan masih aktif
"""

# Perintah untuk download
!pip install kaggle

!mkdir ~/.kaggle

!cp kaggle.json ~/.kaggle/

!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d ekojsalim/indonesia-college-entrance-examination-utbk-2019

!unzip indonesia-college-entrance-examination-utbk-2019

universitas = pd.read_csv("universities.csv")
urutan = universitas.columns[0]
universitas = universitas.drop(columns=[urutan])
universitas

jurusan = pd.read_csv("majors.csv")
urutan_jurusan = jurusan.columns[0]
jurusan = jurusan.drop(columns=[urutan_jurusan])
jurusan

# Melakukan proses extract
#data = response.json()['features']
skor_ips = pd.read_csv("score_humanities.csv")
skor_ips

skor_ipa = pd.read_csv("score_science.csv")
skor_ipa

"""### Transform Datasets
Tujuan: menggabungkan data tabel "skor_ips" dan "skor_ipa" dengan tabel "universitas" dan " jurusan" menjadi satu dataframe berdasarkan hubungan (*connection*) ID_universitas dan ID_major.

#### IPS
"""

urutan_skor = skor_ips.columns[0]
skor_ips = skor_ips.drop(columns=[urutan_skor])
skor_ips

merged_ips = pd.merge(skor_ips, universitas, left_on='id_first_university', right_on='id_university')
merged_ips1 = pd.merge(merged_ips, universitas, left_on='id_second_university', right_on='id_university')
merged_ips1

ips_univ = merged_ips1[['id_user','id_first_university','university_name_x','id_first_major','id_second_university','university_name_y','id_second_major', 'score_eko', 'score_geo', 'score_kmb', 'score_kpu', 'score_kua', 'score_mat', 'score_ppu', 'score_sej', 'score_sos']]
ips_univ

merged_ips2 = pd.merge(ips_univ, jurusan, left_on='id_first_major', right_on='id_major')
merged_ips3 = pd.merge(merged_ips2, jurusan, left_on='id_second_major', right_on='id_major')
merged_ips3

ips_univ_jurusan = merged_ips3[['id_user','id_first_university','university_name_x','id_first_major','major_name_x','capacity_x','id_second_university','university_name_y','id_second_major','major_name_y','capacity_y', 'score_eko', 'score_geo', 'score_kmb', 'score_kpu', 'score_kua', 'score_mat', 'score_ppu', 'score_sej', 'score_sos']]
#ips_univ_jurusan = merged_univ_jurusan.rename(columns = {'id_first_university':'id_univ_pil_1', 'university_name_x':'univ_pil_1', 'id_first_major':'id_jurusan_pil_1', 'major_name_x':'jurusan_pil_1', 'capacity_x':'kapasitas_pil_1', 'id_second_university':'id_univ_pil2', 'university_name_y':'univ_pil_2', 'id_second_major':'id_jurusan_pil_1', 'major_name_y':'jurusan_pil_2', 'capacity_y':'kapasitas_pil_2'}, inplace = True)
#ips_univ_jurusan
ips_univ_jurusan['score_utbk'] = (ips_univ_jurusan['score_eko']+ips_univ_jurusan['score_geo']+ips_univ_jurusan['score_kmb']+ips_univ_jurusan['score_kpu']+ips_univ_jurusan['score_kua']+ips_univ_jurusan['score_mat']+ips_univ_jurusan['score_ppu']+ips_univ_jurusan['score_sej']+ips_univ_jurusan['score_sos'])/9
ips_univ_jurusan['score_utbk'] = ips_univ_jurusan['score_utbk'].astype(int)
ips_univ_jurusan

"""Pilihan untuk mendownload dataset IPS
yang telah ditransform
"""

#ips_univ_jurusan.to_excel("gabungan_ips.xlsx")

"""#### IPA"""

urutan_skor = skor_ipa.columns[0]
skor_ipa = skor_ipa.drop(columns=[urutan_skor])
skor_ipa

merged_ipa = pd.merge(skor_ipa, universitas, left_on='id_first_university', right_on='id_university')
merged_ipa1 = pd.merge(merged_ipa, universitas, left_on='id_second_university', right_on='id_university')
merged_ipa1

ipa_univ = merged_ipa1[['id_user','id_first_university','university_name_x','id_first_major','id_second_university','university_name_y','id_second_major', 'score_bio', 'score_fis', 'score_kim', 'score_kmb', 'score_kpu', 'score_kua', 'score_mat', 'score_ppu']]
ipa_univ

merged_ipa2 = pd.merge(ipa_univ, jurusan, left_on='id_first_major', right_on='id_major')
merged_ipa3 = pd.merge(merged_ipa2, jurusan, left_on='id_second_major', right_on='id_major')
merged_ipa3

ipa_univ_jurusan = merged_ipa3[['id_user','id_first_university','university_name_x','id_first_major','major_name_x','capacity_x','id_second_university','university_name_y','id_second_major','major_name_y','capacity_y', 'score_bio', 'score_fis', 'score_kim', 'score_kmb', 'score_kpu', 'score_kua', 'score_mat', 'score_ppu']]
#ips_univ_jurusan = merged_univ_jurusan.rename(columns = {'id_first_university':'id_univ_pil_1', 'university_name_x':'univ_pil_1', 'id_first_major':'id_jurusan_pil_1', 'major_name_x':'jurusan_pil_1', 'capacity_x':'kapasitas_pil_1', 'id_second_university':'id_univ_pil2', 'university_name_y':'univ_pil_2', 'id_second_major':'id_jurusan_pil_1', 'major_name_y':'jurusan_pil_2', 'capacity_y':'kapasitas_pil_2'}, inplace = True)
#ips_univ_jurusan
ipa_univ_jurusan['score_utbk'] = (ipa_univ_jurusan['score_bio']+ipa_univ_jurusan['score_fis']+ipa_univ_jurusan['score_kim']+ipa_univ_jurusan['score_kmb']+ipa_univ_jurusan['score_kpu']+ipa_univ_jurusan['score_kua']+ipa_univ_jurusan['score_mat']+ipa_univ_jurusan['score_ppu'])/8
ipa_univ_jurusan['score_utbk'] = ipa_univ_jurusan['score_utbk'].astype(int)
ipa_univ_jurusan

"""Pilihan untuk mendownload dataset IPA yang telah ditransform"""

#ipa_univ_jurusan.to_excel("gabungan_ipa.xlsx")

"""### Load to PySpark"""

df1 = spark.createDataFrame(ips_univ_jurusan)
df1.show()

df2 = spark.createDataFrame(ipa_univ_jurusan)
df2.show()

df1.createOrReplaceTempView("data_ips")
df2.createOrReplaceTempView("data_ipa")

"""# Analysis with PySpark SQL

### 1. Jurusan paling diminati dari IPA dan IPS

#### 1a. Top 10 Jurusan paling diminati dari penjurusan IPA
"""

favorit_ipa = spark.sql("""
  SELECT Nama_Jurusan, COUNT(*) AS Jumlah_Pendaftar
FROM (
    SELECT major_name_x AS Nama_Jurusan FROM data_ipa
    UNION ALL
    SELECT major_name_y AS Nama_Jurusan FROM data_ipa
) AS combined_data
GROUP BY Nama_Jurusan
ORDER BY Jumlah_Pendaftar DESC
LIMIT 10;
"""
)
favorit_ipa.limit(favorit_ipa.count()).show(truncate=False)

"""#### 1b. Top 10 Jurusan paling diminati dari penjurusan IPS"""

favorit_ips = spark.sql("""
  SELECT Nama_Jurusan, COUNT(*) AS Jumlah_Pendaftar
FROM (
    SELECT major_name_x AS Nama_Jurusan FROM data_ips
    UNION ALL
    SELECT major_name_y AS Nama_Jurusan FROM data_ips
) AS combined_data
GROUP BY Nama_Jurusan
ORDER BY Jumlah_Pendaftar DESC
LIMIT 10;
"""
)
favorit_ips.limit(favorit_ips.count()).show(truncate=False)

"""### 2. Top 10 Universitas Paling Diminati"""

favorit_univ1 = spark.sql("""
  SELECT Nama_Universitas, COUNT(*) AS Jumlah_Pendaftar
FROM (
    SELECT university_name_x AS Nama_Universitas FROM data_ipa
    UNION ALL
    SELECT university_name_y AS Nama_Universitas FROM data_ipa
) AS combined_data
GROUP BY Nama_Universitas
ORDER BY Jumlah_Pendaftar DESC;
"""
).createOrReplaceTempView("favorit_univ1")

favorit_univ2 = spark.sql("""
  SELECT Nama_Universitas, COUNT(*) AS Jumlah_Pendaftar
FROM (
    SELECT university_name_x AS Nama_Universitas FROM data_ips
    UNION ALL
    SELECT university_name_y AS Nama_Universitas FROM data_ips
) AS combined_data
GROUP BY Nama_Universitas
ORDER BY Jumlah_Pendaftar DESC;
"""
).createOrReplaceTempView("favorit_univ2")

favorit_univ = spark.sql("""
  SELECT Nama_Universitas, SUM(Jumlah_Pendaftar) AS Jumlah_Pendaftar
  FROM (
    SELECT Nama_Universitas, Jumlah_Pendaftar
    FROM (
      SELECT favorit_univ1.Nama_Universitas, favorit_univ1.Jumlah_Pendaftar
      FROM favorit_univ1
      UNION ALL
      SELECT favorit_univ2.Nama_Universitas, favorit_univ2.Jumlah_Pendaftar
      FROM favorit_univ2
    ) AS combined_data
  ) AS subquery
  GROUP BY Nama_Universitas
  ORDER BY Jumlah_Pendaftar DESC
  LIMIT 10
""")

favorit_univ.limit(favorit_univ.count()).show(truncate=False)

"""### 3. Berdasarkan jurusan paling diminati universitas mana yang paling banyak peminatnya?

#### 3a. Top 10 Universitas Paling Diminati untuk Pemilihan Jurusan Favorit IPA (yaitu: PENDIDIKAN DOKTER)
"""

favorit_univ_dokter = spark.sql("""
  SELECT Nama_Universitas, COUNT(*) AS Jumlah_Pendaftar
FROM (
    SELECT university_name_x AS Nama_Universitas FROM data_ipa
    UNION ALL
    SELECT university_name_y AS Nama_Universitas FROM data_ipa
    WHERE data_ipa.major_name_x = "PENDIDIKAN DOKTER" OR data_ipa.major_name_y = "PENDIDIKAN DOKTER"
) AS combined_data
GROUP BY Nama_Universitas
ORDER BY Jumlah_Pendaftar DESC
LIMIT 10;
"""
)
favorit_univ_dokter.limit(favorit_univ_dokter.count()).show(truncate=False)

"""#### 3b. Top 10 Universitas Paling Diminati untuk Pemilihan Jurusan Favorit IPS (yaitu: MANAJEMEN)"""

favorit_univ_manajemen = spark.sql("""
  SELECT Nama_Universitas, COUNT(*) AS Jumlah_Pendaftar
FROM (
    SELECT university_name_x AS Nama_Universitas FROM data_ips
    UNION ALL
    SELECT university_name_y AS Nama_Universitas FROM data_ips
    WHERE data_ips.major_name_x = "MANAJEMEN" OR data_ips.major_name_y = "MANAJEMEN"
) AS combined_data
GROUP BY Nama_Universitas
ORDER BY Jumlah_Pendaftar DESC
LIMIT 10;
"""
)
favorit_univ_manajemen.limit(favorit_univ_manajemen.count()).show(truncate=False)

"""### 4. Informasi masing-masing universitas

- Jumlah mahasiswa baru yang diterima tahun ini (kapasitas)
- Rata-rata Skor UTBK pendaftar universitas tersebut
- Persentase penerimaan Universitas (kapasitas $\div$ jumlah pendaftar)

#### 4a. Informasi masing-masing universitas untuk segmen penjurusan IPA
"""

pendaftar_univ_ipa = spark.sql("""
  SELECT Nama_Universitas, COUNT(*) AS Jumlah_Pendaftar
FROM (
    SELECT university_name_x AS Nama_Universitas FROM data_ipa
    UNION ALL
    SELECT university_name_y AS Nama_Universitas FROM data_ipa
) AS combined_data
GROUP BY Nama_Universitas
ORDER BY Jumlah_Pendaftar DESC;
"""
).createOrReplaceTempView("pendaftar_univ_ipa")

pendaftar_univ_ipa = spark.sql("""
  SELECT Nama_Universitas, COUNT(*) AS Jumlah_Pendaftar
FROM (
    SELECT university_name_x AS Nama_Universitas FROM data_ipa
    UNION ALL
    SELECT university_name_y AS Nama_Universitas FROM data_ipa
) AS combined_data
GROUP BY Nama_Universitas
ORDER BY Jumlah_Pendaftar DESC;
"""
).createOrReplaceGlobalTempView("pendaftar_univ_ipa")

rata2_skor_univ_ipa = spark.sql("""
  SELECT Nama_Universitas, CAST(AVG(rata2_skor_utbk) AS INT) AS skor_utbk
FROM (
    SELECT university_name_x AS Nama_Universitas, score_utbk AS rata2_skor_utbk FROM data_ipa
    UNION ALL
    SELECT university_name_y AS Nama_Universitas, score_utbk AS rata2_skor_utbk FROM data_ipa
) AS combined_data
GROUP BY Nama_Universitas
ORDER BY skor_utbk DESC;
"""
).createOrReplaceTempView("rata2_skor_univ_ipa")

test_kapasitas_univ_ipa = spark.sql("""
  SELECT Nama_Universitas, jurusan, kapasitas
FROM (
    SELECT university_name_x AS Nama_Universitas, major_name_x AS jurusan, capacity_x AS kapasitas FROM data_ipa
    UNION ALL
    SELECT university_name_y AS Nama_Universitas, major_name_y AS jurusan, capacity_y AS kapasitas FROM data_ipa
) AS combined_data
GROUP BY Nama_Universitas, jurusan, kapasitas
ORDER BY SUM(kapasitas) DESC;
"""
).createOrReplaceTempView("test_kapasitas_univ_ipa")

kapasitas_univ_ipa = spark.sql("""
  SELECT Nama_Universitas, SUM(kapasitas) AS kapasitas
  FROM test_kapasitas_univ_ipa
  GROUP BY Nama_Universitas
  ORDER BY kapasitas DESC;
"""
).createOrReplaceTempView("kapasitas_univ_ipa")

test_info_univ_ipa = spark.sql("""
  SELECT pendaftar_univ_ipa.Nama_Universitas, kapasitas_univ_ipa.kapasitas AS Jumlah_Mahasiswa_Baru, rata2_skor_univ_ipa.skor_utbk AS avg_skor_utbk
  FROM pendaftar_univ_ipa
  JOIN kapasitas_univ_ipa ON pendaftar_univ_ipa.Nama_Universitas = kapasitas_univ_ipa.Nama_Universitas
  JOIN rata2_skor_univ_ipa ON kapasitas_univ_ipa.Nama_Universitas = rata2_skor_univ_ipa.Nama_Universitas
  ORDER BY Jumlah_Mahasiswa_Baru DESC;
"""
).createOrReplaceGlobalTempView("test_info_univ_ipa")

pendaftar_univ_ipa = spark.sql("SELECT * FROM global_temp.pendaftar_univ_ipa")
info_univ_ipa = spark.sql("SELECT * FROM global_temp.test_info_univ_ipa")

"""RUN SEKALI AJA

⬇⬇⬇⬇⬇
"""

info_univ_ipa = info_univ_ipa.join(pendaftar_univ_ipa, "Nama_Universitas")
info_univ_ipa = info_univ_ipa.withColumn("acceptance_rate", (info_univ_ipa.Jumlah_Mahasiswa_Baru / info_univ_ipa.Jumlah_Pendaftar * 100).cast("double"))
info_univ_ipa = info_univ_ipa.drop("Jumlah_Pendaftar")
info_univ_ipa = info_univ_ipa.orderBy(info_univ_ipa.Jumlah_Mahasiswa_Baru.desc())
info_univ_ipa.limit(info_univ_ipa.count()).show(truncate=False)

"""#### 4b. Informasi masing-masing universitas untuk segmen penjurusan IPS"""

pendaftar_univ_ips = spark.sql("""
  SELECT Nama_Universitas, COUNT(*) AS Jumlah_Pendaftar
FROM (
    SELECT university_name_x AS Nama_Universitas FROM data_ips
    UNION ALL
    SELECT university_name_y AS Nama_Universitas FROM data_ips
) AS combined_data
GROUP BY Nama_Universitas
ORDER BY Jumlah_Pendaftar DESC;
"""
).createOrReplaceTempView("pendaftar_univ_ips")

pendaftar_univ_ips = spark.sql("""
  SELECT Nama_Universitas, COUNT(*) AS Jumlah_Pendaftar
FROM (
    SELECT university_name_x AS Nama_Universitas FROM data_ips
    UNION ALL
    SELECT university_name_y AS Nama_Universitas FROM data_ips
) AS combined_data
GROUP BY Nama_Universitas
ORDER BY Jumlah_Pendaftar DESC;
"""
).createOrReplaceGlobalTempView("pendaftar_univ_ips")

rata2_skor_univ_ips = spark.sql("""
  SELECT Nama_Universitas, CAST(AVG(rata2_skor_utbk) AS INT) AS skor_utbk
FROM (
    SELECT university_name_x AS Nama_Universitas, score_utbk AS rata2_skor_utbk FROM data_ips
    UNION ALL
    SELECT university_name_y AS Nama_Universitas, score_utbk AS rata2_skor_utbk FROM data_ips
) AS combined_data
GROUP BY Nama_Universitas
ORDER BY skor_utbk DESC;
"""
).createOrReplaceTempView("rata2_skor_univ_ips")

test_kapasitas_univ_ips = spark.sql("""
  SELECT Nama_Universitas, jurusan, kapasitas
FROM (
    SELECT university_name_x AS Nama_Universitas, major_name_x AS jurusan, capacity_x AS kapasitas FROM data_ips
    UNION ALL
    SELECT university_name_y AS Nama_Universitas, major_name_y AS jurusan, capacity_y AS kapasitas FROM data_ips
) AS combined_data
GROUP BY Nama_Universitas, jurusan, kapasitas
ORDER BY SUM(kapasitas) DESC;
"""
).createOrReplaceTempView("test_kapasitas_univ_ips")

kapasitas_univ_ips = spark.sql("""
  SELECT Nama_Universitas, SUM(kapasitas) AS kapasitas
  FROM test_kapasitas_univ_ips
  GROUP BY Nama_Universitas
  ORDER BY kapasitas DESC;
"""
).createOrReplaceTempView("kapasitas_univ_ips")

test_info_univ_ips = spark.sql("""
  SELECT pendaftar_univ_ips.Nama_Universitas, kapasitas_univ_ips.kapasitas AS Jumlah_Mahasiswa_Baru, rata2_skor_univ_ips.skor_utbk AS avg_skor_utbk
  FROM pendaftar_univ_ips
  JOIN kapasitas_univ_ips ON pendaftar_univ_ips.Nama_Universitas = kapasitas_univ_ips.Nama_Universitas
  JOIN rata2_skor_univ_ips ON kapasitas_univ_ips.Nama_Universitas = rata2_skor_univ_ips.Nama_Universitas
  ORDER BY Jumlah_Mahasiswa_Baru DESC;
"""
).createOrReplaceGlobalTempView("test_info_univ_ips")

pendaftar_univ_ips = spark.sql("SELECT * FROM global_temp.pendaftar_univ_ips")
info_univ_ips = spark.sql("SELECT * FROM global_temp.test_info_univ_ips")

"""RUN SEKALI AJA

⬇⬇⬇⬇⬇
"""

info_univ_ips = info_univ_ips.join(pendaftar_univ_ips, "Nama_Universitas")
info_univ_ips = info_univ_ips.withColumn("acceptance_rate", (info_univ_ips.Jumlah_Mahasiswa_Baru / info_univ_ips.Jumlah_Pendaftar * 100).cast("double"))
info_univ_ips = info_univ_ips.drop("Jumlah_Pendaftar")
info_univ_ips = info_univ_ips.orderBy(info_univ_ips.Jumlah_Mahasiswa_Baru.desc())
info_univ_ips.limit(info_univ_ipa.count()).show(truncate=False)

"""### 5. Informasi masing-masing Jurusan

- Jumlah mahasiswa baru untuk masing-masing jurusan tahun ini (kapasitas)
- Rata-rata Skor UTBK pendaftar jurusan tersebut
- Persentase penerimaan masing-masing jurusan
 (kapasitas $\div$ jumlah pendaftar)

#### 5a. Informasi masing-masing jurusan untuk segmen penjurusan IPA
"""

pendaftar_jurusan_ipa = spark.sql("""
  SELECT Nama_Jurusan, COUNT(*) AS Jumlah_Pendaftar
FROM (
    SELECT major_name_x AS Nama_Jurusan FROM data_ipa
    UNION ALL
    SELECT major_name_y AS Nama_Jurusan FROM data_ipa
) AS combined_data
GROUP BY Nama_Jurusan
ORDER BY Jumlah_Pendaftar DESC;
"""
).createOrReplaceTempView("pendaftar_jurusan_ipa")

pendaftar_jurusan_ipa = spark.sql("""
  SELECT Nama_Jurusan, COUNT(*) AS Jumlah_Pendaftar
FROM (
    SELECT major_name_x AS Nama_Jurusan FROM data_ipa
    UNION ALL
    SELECT major_name_y AS Nama_Jurusan FROM data_ipa
) AS combined_data
GROUP BY Nama_Jurusan
ORDER BY Jumlah_Pendaftar DESC;
"""
).createOrReplaceGlobalTempView("pendaftar_jurusan_ipa")

rata2_skor_jurusan_ipa = spark.sql("""
  SELECT Nama_Jurusan, CAST(AVG(rata2_skor_utbk) AS INT) AS skor_utbk
FROM (
    SELECT major_name_x AS Nama_Jurusan, score_utbk AS rata2_skor_utbk FROM data_ipa
    UNION ALL
    SELECT major_name_y AS Nama_Jurusan, score_utbk AS rata2_skor_utbk FROM data_ipa
) AS combined_data
GROUP BY Nama_Jurusan
ORDER BY skor_utbk DESC;
"""
).createOrReplaceTempView("rata2_skor_jurusan_ipa")

test_kapasitas_jurusan_ipa = spark.sql("""
  SELECT Nama_Universitas, Nama_Jurusan, kapasitas
FROM (
    SELECT university_name_x AS Nama_Universitas, major_name_x AS Nama_Jurusan, capacity_x AS kapasitas FROM data_ipa
    UNION ALL
    SELECT university_name_y AS Nama_Universitas, major_name_y AS Nama_Jurusan, capacity_y AS kapasitas FROM data_ipa
) AS combined_data
GROUP BY Nama_Universitas, Nama_Jurusan, kapasitas
ORDER BY SUM(kapasitas) DESC;
"""
).createOrReplaceTempView("test_kapasitas_jurusan_ipa")

kapasitas_jurusan_ipa = spark.sql("""
  SELECT Nama_Jurusan, SUM(kapasitas) AS kapasitas
  FROM test_kapasitas_jurusan_ipa
  GROUP BY Nama_Jurusan
  ORDER BY kapasitas DESC;
"""
).createOrReplaceTempView("kapasitas_jurusan_ipa")

test_info_jurusan_ipa = spark.sql("""
  SELECT pendaftar_jurusan_ipa.Nama_Jurusan, kapasitas_jurusan_ipa.kapasitas AS Jumlah_Mahasiswa_Baru, rata2_skor_jurusan_ipa.skor_utbk AS avg_skor_utbk, pendaftar_jurusan_ipa.Jumlah_Pendaftar
  FROM pendaftar_jurusan_ipa
  JOIN kapasitas_jurusan_ipa ON pendaftar_jurusan_ipa.Nama_Jurusan = kapasitas_jurusan_ipa.Nama_Jurusan
  JOIN rata2_skor_jurusan_ipa ON kapasitas_jurusan_ipa.Nama_Jurusan = rata2_skor_jurusan_ipa.Nama_Jurusan
  ORDER BY Jumlah_Mahasiswa_Baru DESC;
"""
).createOrReplaceGlobalTempView("test_info_jurusan_ipa")

pendaftar_jurusan_ipa = spark.sql("SELECT * FROM global_temp.pendaftar_univ_ipa")
info_jurusan_ipa = spark.sql("SELECT * FROM global_temp.test_info_jurusan_ipa")

"""RUN SEKALI AJA

⬇⬇⬇⬇⬇
"""

#info_jurusan_ipa = info_jurusan_ipa.join(pendaftar_jurusan_ipa, "Nama_Jurusan")
info_jurusan_ipa = info_jurusan_ipa.withColumn("acceptance_rate", (info_jurusan_ipa.Jumlah_Mahasiswa_Baru / info_jurusan_ipa.Jumlah_Pendaftar * 100).cast("double"))
info_jurusan_ipa = info_jurusan_ipa.drop("Jumlah_Pendaftar")
info_jurusan_ipa = info_jurusan_ipa.orderBy(info_jurusan_ipa.Jumlah_Mahasiswa_Baru.desc())
info_jurusan_ipa.limit(info_jurusan_ipa.count()).show(truncate=False)

"""#### 5b. Informasi masing-masing jurusan untuk segmen penjurusan IPS"""

pendaftar_jurusan_ips = spark.sql("""
  SELECT Nama_Jurusan, COUNT(*) AS Jumlah_Pendaftar
FROM (
    SELECT major_name_x AS Nama_Jurusan FROM data_ips
    UNION ALL
    SELECT major_name_y AS Nama_Jurusan FROM data_ips
) AS combined_data
GROUP BY Nama_Jurusan
ORDER BY Jumlah_Pendaftar DESC;
"""
).createOrReplaceTempView("pendaftar_jurusan_ips")

pendaftar_jurusan_ips = spark.sql("""
  SELECT Nama_Jurusan, COUNT(*) AS Jumlah_Pendaftar
FROM (
    SELECT major_name_x AS Nama_Jurusan FROM data_ips
    UNION ALL
    SELECT major_name_y AS Nama_Jurusan FROM data_ips
) AS combined_data
GROUP BY Nama_Jurusan
ORDER BY Jumlah_Pendaftar DESC;
"""
).createOrReplaceGlobalTempView("pendaftar_jurusan_ips")

rata2_skor_jurusan_ips = spark.sql("""
  SELECT Nama_Jurusan, CAST(AVG(rata2_skor_utbk) AS INT) AS skor_utbk
FROM (
    SELECT major_name_x AS Nama_Jurusan, score_utbk AS rata2_skor_utbk FROM data_ips
    UNION ALL
    SELECT major_name_y AS Nama_Jurusan, score_utbk AS rata2_skor_utbk FROM data_ips
) AS combined_data
GROUP BY Nama_Jurusan
ORDER BY skor_utbk DESC;
"""
).createOrReplaceTempView("rata2_skor_jurusan_ips")

test_kapasitas_jurusan_ips = spark.sql("""
  SELECT Nama_Universitas, Nama_Jurusan, kapasitas
FROM (
    SELECT university_name_x AS Nama_Universitas, major_name_x AS Nama_Jurusan, capacity_x AS kapasitas FROM data_ips
    UNION ALL
    SELECT university_name_y AS Nama_Universitas, major_name_y AS Nama_Jurusan, capacity_y AS kapasitas FROM data_ips
) AS combined_data
GROUP BY Nama_Universitas, Nama_Jurusan, kapasitas
ORDER BY SUM(kapasitas) DESC;
"""
).createOrReplaceTempView("test_kapasitas_jurusan_ips")

kapasitas_jurusan_ips = spark.sql("""
  SELECT Nama_Jurusan, SUM(kapasitas) AS kapasitas
  FROM test_kapasitas_jurusan_ips
  GROUP BY Nama_Jurusan
  ORDER BY kapasitas DESC;
"""
).createOrReplaceTempView("kapasitas_jurusan_ips")

test_info_jurusan_ips = spark.sql("""
  SELECT pendaftar_jurusan_ips.Nama_Jurusan, kapasitas_jurusan_ips.kapasitas AS Jumlah_Mahasiswa_Baru, rata2_skor_jurusan_ips.skor_utbk AS avg_skor_utbk, pendaftar_jurusan_ips.Jumlah_Pendaftar
  FROM pendaftar_jurusan_ips
  JOIN kapasitas_jurusan_ips ON pendaftar_jurusan_ips.Nama_Jurusan = kapasitas_jurusan_ips.Nama_Jurusan
  JOIN rata2_skor_jurusan_ips ON kapasitas_jurusan_ips.Nama_Jurusan = rata2_skor_jurusan_ips.Nama_Jurusan
  ORDER BY Jumlah_Mahasiswa_Baru DESC;
"""
).createOrReplaceGlobalTempView("test_info_jurusan_ips")

pendaftar_jurusan_ips = spark.sql("SELECT * FROM global_temp.pendaftar_univ_ips")
info_jurusan_ips = spark.sql("SELECT * FROM global_temp.test_info_jurusan_ips")

"""RUN SEKALI AJA

⬇⬇⬇⬇⬇
"""

#info_jurusan_ips = info_jurusan_ips.join(pendaftar_jurusan_ips, "Nama_Jurusan")
info_jurusan_ips = info_jurusan_ips.withColumn("acceptance_rate", (info_jurusan_ips.Jumlah_Mahasiswa_Baru / info_jurusan_ips.Jumlah_Pendaftar * 100).cast("double"))
info_jurusan_ips = info_jurusan_ips.drop("Jumlah_Pendaftar")
info_jurusan_ips = info_jurusan_ips.orderBy(info_jurusan_ips.Jumlah_Mahasiswa_Baru.desc())
info_jurusan_ips.limit(info_jurusan_ips.count()).show(truncate=False)