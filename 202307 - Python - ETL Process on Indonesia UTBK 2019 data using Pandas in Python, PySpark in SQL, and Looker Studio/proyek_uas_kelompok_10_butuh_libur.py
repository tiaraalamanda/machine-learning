# -*- coding: utf-8 -*-
"""Proyek UAS - Kelompok 10 Butuh Libur.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15Z23RFK9CW5skeh3WQrhy7SoHKMvLK8U

# <center> Proyek UAS Kapita Selekta Statistika

---

**Kelompok 10 - Butuh Libur**

6161901066 - Dennis Imanuel\
6161901104 - Putu Lila Kusumayani \
6161901114 - Bilqis Aulia R.\
6161901116 - Tiara Alamanda
"""

# Instalasi pyspark
!pip install pyspark

import pandas as pd
import numpy as np

# import library PySpark
import requests
from pyspark.sql import SparkSession
from pyspark.sql.types import StructType, StructField, StringType, FloatType, IntegerType
from pyspark.sql.functions import avg, min, max, stddev, desc

# Membuat spark session
spark = SparkSession.builder.appName("Analisis Skor UTBK Sosilogi").getOrCreate()

"""# Pipeline ETL

## Ekstrak Data
"""

universitas = pd.read_csv("universities.csv")
urutan_univ = universitas.columns[0]
universitas = universitas.drop(columns=[urutan_univ])
universitas

jurusan = pd.read_csv("majors.csv")
urutan_jurusan = jurusan.columns[0]
jurusan = jurusan.drop(columns=[urutan_jurusan])
jurusan

"""## Transform Data

Tujuan: menggabungkan data tabel "skor_ips" dan "skor_ipa" dengan tabel "universitas" dan " jurusan" menjadi satu dataframe berdasarkan hubungan (*connection*) ID_universitas dan ID_major.

### IPS
"""

skor_ips = pd.read_csv("score_humanities.csv")
skor_ips

urutan_skor = skor_ips.columns[0]
skor_ips = skor_ips.drop(columns=[urutan_skor])
skor_ips

merged_ips = pd.merge(skor_ips, universitas, left_on='id_first_university', right_on='id_university')
merged_ips1 = pd.merge(merged_ips, universitas, left_on='id_second_university', right_on='id_university')
merged_ips1

ips_univ = merged_ips1[['id_user','id_first_university','university_name_x','id_first_major','id_second_university','university_name_y','id_second_major', 'score_eko', 'score_geo', 'score_kmb', 'score_kpu', 'score_kua', 'score_mat', 'score_ppu', 'score_sej', 'score_sos']]
ips_univ

merged_ips2 = pd.merge(ips_univ, jurusan, left_on='id_first_major', right_on='id_major')
merged_ips3 = pd.merge(merged_ips2, jurusan, left_on='id_second_major', right_on='id_major')
merged_ips3

ips_univ_jurusan = merged_ips3[['id_user','id_first_university','university_name_x','id_first_major','major_name_x','capacity_x','id_second_university','university_name_y','id_second_major','major_name_y','capacity_y', 'score_eko', 'score_geo', 'score_kmb', 'score_kpu', 'score_kua', 'score_mat', 'score_ppu', 'score_sej', 'score_sos']]
#ips_univ_jurusan = merged_univ_jurusan.rename(columns = {'id_first_university':'id_univ_pil_1', 'university_name_x':'univ_pil_1', 'id_first_major':'id_jurusan_pil_1', 'major_name_x':'jurusan_pil_1', 'capacity_x':'kapasitas_pil_1', 'id_second_university':'id_univ_pil2', 'university_name_y':'univ_pil_2', 'id_second_major':'id_jurusan_pil_1', 'major_name_y':'jurusan_pil_2', 'capacity_y':'kapasitas_pil_2'}, inplace = True)
#ips_univ_jurusan
ips_univ_jurusan

ips_univ_jurusan.to_excel("gabungan_ips.xlsx")

"""### IPA"""

skor_ipa = pd.read_csv("score_science.csv")
skor_ipa

urutan_skor = skor_ipa.columns[0]
skor_ipa = skor_ipa.drop(columns=[urutan_skor])
skor_ipa

merged_ipa = pd.merge(skor_ipa, universitas, left_on='id_first_university', right_on='id_university')
merged_ipa1 = pd.merge(merged_ipa, universitas, left_on='id_second_university', right_on='id_university')
merged_ipa1

ipa_univ = merged_ipa1[['id_user','id_first_university','university_name_x','id_first_major','id_second_university','university_name_y','id_second_major', 'score_bio', 'score_fis', 'score_kim', 'score_kmb', 'score_kpu', 'score_kua', 'score_mat', 'score_ppu']]
ipa_univ

merged_ipa2 = pd.merge(ipa_univ, jurusan, left_on='id_first_major', right_on='id_major')
merged_ipa3 = pd.merge(merged_ipa2, jurusan, left_on='id_second_major', right_on='id_major')
merged_ipa3

ipa_univ_jurusan = merged_ipa3[['id_user','id_first_university','university_name_x','id_first_major','major_name_x','capacity_x','id_second_university','university_name_y','id_second_major','major_name_y','capacity_y', 'score_bio', 'score_fis', 'score_kim', 'score_kmb', 'score_kpu', 'score_kua', 'score_mat', 'score_ppu']]
#ips_univ_jurusan = merged_univ_jurusan.rename(columns = {'id_first_university':'id_univ_pil_1', 'university_name_x':'univ_pil_1', 'id_first_major':'id_jurusan_pil_1', 'major_name_x':'jurusan_pil_1', 'capacity_x':'kapasitas_pil_1', 'id_second_university':'id_univ_pil2', 'university_name_y':'univ_pil_2', 'id_second_major':'id_jurusan_pil_1', 'major_name_y':'jurusan_pil_2', 'capacity_y':'kapasitas_pil_2'}, inplace = True)
#ips_univ_jurusan
ipa_univ_jurusan

ipa_univ_jurusan.to_excel("gabungan_ipa.xlsx")

"""## Data Gabungan IPS & IPA"""

gabungan = [ips_univ_jurusan, ipa_univ_jurusan]
data_lengkap = pd.concat(gabungan)

data_lengkap.to_excel("data_lengkap.xlsx")

"""### Load to PySpark"""

df1 = spark.createDataFrame(ips_univ_jurusan)
df1.show()

df2 = spark.createDataFrame(ipa_univ_jurusan)
df2.show()

df1.createOrReplaceTempView("data_ips")
df2.createOrReplaceTempView("data_ipa")

"""# Analysis with PySpark SQL

## 1. Jurusan paling diminati dari IPA dan IPS

### 1a. Top 10 Jurusan paling diminati dari penjurusan IPA
"""

favorit_ipa = spark.sql("""
  SELECT Nama_Jurusan, COUNT(*) AS Jumlah_Pendaftar
FROM (
    SELECT major_name_x AS Nama_Jurusan FROM data_ipa
    UNION ALL
    SELECT major_name_y AS Nama_Jurusan FROM data_ipa
) AS combined_data
GROUP BY Nama_Jurusan
ORDER BY Jumlah_Pendaftar DESC
LIMIT 10;
"""
)
favorit_ipa.show()

"""### 1b. Top 10 Jurusan paling diminati dari penjurusan IPS"""

favorit_ips = spark.sql("""
  SELECT Nama_Jurusan, COUNT(*) AS Jumlah_Pendaftar
FROM (
    SELECT major_name_x AS Nama_Jurusan FROM data_ips
    UNION ALL
    SELECT major_name_y AS Nama_Jurusan FROM data_ips
) AS combined_data
GROUP BY Nama_Jurusan
ORDER BY Jumlah_Pendaftar DESC
LIMIT 10;
"""
)
favorit_ips.show()

"""## 2. Top 10 Universitas Paling Diminati"""

favorit_univ1 = spark.sql("""
  SELECT Nama_Universitas, COUNT(*) AS Jumlah_Pendaftar
FROM (
    SELECT university_name_x AS Nama_Universitas FROM data_ipa
    UNION ALL
    SELECT university_name_y AS Nama_Universitas FROM data_ipa
) AS combined_data
GROUP BY Nama_Universitas
ORDER BY Jumlah_Pendaftar DESC;
"""
).createOrReplaceTempView("favorit_univ1")

favorit_univ2 = spark.sql("""
  SELECT Nama_Universitas, COUNT(*) AS Jumlah_Pendaftar
FROM (
    SELECT university_name_x AS Nama_Universitas FROM data_ips
    UNION ALL
    SELECT university_name_y AS Nama_Universitas FROM data_ips
) AS combined_data
GROUP BY Nama_Universitas
ORDER BY Jumlah_Pendaftar DESC;
"""
).createOrReplaceTempView("favorit_univ2")

favorit_univ = spark.sql("""
  SELECT favorit_univ1.Nama_Universitas, favorit_univ1.Jumlah_Pendaftar
  FROM favorit_univ1
  JOIN favorit_univ2
  ON favorit_univ1.Nama_Universitas = favorit_univ2.Nama_Universitas
  ORDER BY Jumlah_Pendaftar DESC
  LIMIT 10;
  """
  )
favorit_univ.show()

"""## 3. Berdasarkan jurusan paling diminati, universitas mana yang paling banyak peminatnya?

### 3a. Top 10 Universitas paling diminati untuk pemilihan jurusan fav IPA (yaitu: PENDIDIKAN DOKTER)
"""

favorit_univ_dokter = spark.sql("""
  SELECT Nama_Universitas, COUNT(*) AS Jumlah_Pendaftar
FROM (
    SELECT university_name_x AS Nama_Universitas FROM data_ipa
    UNION ALL
    SELECT university_name_y AS Nama_Universitas FROM data_ipa
    WHERE data_ipa.major_name_x = "PENDIDIKAN DOKTER" OR data_ipa.major_name_y = "PENDIDIKAN DOKTER"
) AS combined_data
GROUP BY Nama_Universitas
ORDER BY Jumlah_Pendaftar DESC
LIMIT 10;
"""
)
favorit_univ_dokter.show()

"""### 3b. Top 10 Universitas paling diminati untuk pemilihan jurusan fav IPS (yaitu: MANAJEMEN)"""

favorit_univ_manajemen = spark.sql("""
  SELECT Nama_Universitas, COUNT(*) AS Jumlah_Pendaftar
FROM (
    SELECT university_name_x AS Nama_Universitas FROM data_ips
    UNION ALL
    SELECT university_name_y AS Nama_Universitas FROM data_ips
    WHERE data_ips.major_name_x = "MANAJEMEN" OR data_ips.major_name_y = "MANAJEMEN"
) AS combined_data
GROUP BY Nama_Universitas
ORDER BY Jumlah_Pendaftar DESC
LIMIT 10;
"""
)
favorit_univ_manajemen.show()

"""## Coba2"""

#universitas_ips = skor_ips
#def transform_orders(data):
#  skor_ips['id_first_university'] = universitas['id_university']
#  skor_ips['id_second_university'] = universitas['id_university']
#  return data

#universitas_ips = transform_orders(universitas_ips)
#universitas_ips

"""COBA BARU LILA"""

#df1 = pd.read_csv('score_humanities.csv') #dataset score_humanities/ dataset umum
#df2 = pd.read_csv('universities.csv') #dataset university (yang berisi informasi universitas)

#id_university = 335
#df_filtered = df2[df2['id_university'] == id_university]

# Ambil nama universitas dari dataset kedua yang telah difilter
#university_name = df_filtered['university_name'].values[0]

# Tampilkan nama universitas
#print(university_name)

