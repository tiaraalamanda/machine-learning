# -*- coding: utf-8 -*-
"""ButuhLibur_UTS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YeCWzVFhXmfXmtfzBN7ZKsaYBmh30oZr

# <center> Proyek UTS Kapita Selekta Statistika

---

**Kelompok 10 - Butuh Libur**

6161901066 - Dennis Imanuel\
6161901104 - Putu Lila Kusumayani \
6161901114 - Bilqis Aulia R.\
6161901116 - Tiara Alamanda

# 1. Extraction Data Online Retail
- menghilangkan nilai kosong / NaN
"""

import pandas as pd
online_retail = pd.concat(pd.read_excel("online_retail_II.xlsx",sheet_name=None), ignore_index=True)
tabel_lengkap = online_retail.dropna()

tabel_lengkap.to_excel("tabellengkap.xlsx")

"""# 2. Membuat dan Transformasi Dataframe untuk data customers, data penjualan, dan data produk"""

data_customer = tabel_lengkap
data_customer.rename(columns = {'Customer ID':'CustomerID'}, inplace = True)
def transform_orders(data):
    data['Pengeluaran'] = data['Quantity'] * data['Price']
    #data.drop(columns=['Price'], inplace=True)
    return data

data_customer = transform_orders(data_customer)
data_customer

data_customer.to_excel("datacustomer.xlsx")

def transform_orders(data):
    data['Pendapatan'] = data['Quantity'] * data['Price']
    return data

data_penjualan = transform_orders(tabel_lengkap)
data_penjualan

data_penjualan

data_penjualan.to_excel("datapenjualan.xlsx")

data_produk = data_penjualan[["StockCode","Description"]]
#print(data_produk.dtypes)
#data_produk['Description'] = data_produk['Description'].astype(str)
#data_produk = re.sub('\s+',' ',Lower_string)
#data_produk.head(50)
#data_produk = data_produk['Description'].str.replace('[^\w\s]','')
data_produk

data_produk.to_excel("dataproduk.xlsx")

"""### **Load Dataframe ke dalam SQL Database Online**

Catatan: Tidak bisa karena Dataframe terlalu besar untuk Database (>10mb)
"""

!pip install mysql-connector-python
import mysql.connector
from mysql.connector import Error
from sqlalchemy import create_engine

def load(data, table_name, connection_config):
    try:
        engine = create_engine("mysql+mysqlconnector://{user}:{password}@{host}/{database}".format(**connection_config))
        data.to_sql(table_name, engine, if_exists='replace', index=False)
    finally:
        engine.dispose()

def main():
    connection_config = {
        'host': 'boxjilu1hhcsvyhrfhm8-mysql.services.clever-cloud.com',
        'user': 'uimc2rlut5gjjui8',
        'password': 'GKsqtie8xBKSW86AteoN',
        'database': 'boxjilu1hhcsvyhrfhm8'
    }
    load(data_customer, 'customers', connection_config)
    load(data_penjualan, 'penjualan', connection_config)
    load(data_produk, 'produk', connection_config)

if __name__ == '__main__':
    main()

"""# 3. Data Analysis and reporting with Python Pandas

### 1. Produk Terlaris
"""

produk_terlaris = data_penjualan[["StockCode","Description","Quantity","Pendapatan"]]
produk_terlaris = produk_terlaris.groupby('Description').sum('Quantity')
produk_terlaris = produk_terlaris.sort_values('Quantity', ascending=False)
produk_terlaris.head(5)

produk_terlaris.to_csv("produkterlaris.csv")

"""### 2. Segmentasi Pelanggan

### A. Segmentasi Pelanggan berdasarkan Jumlah Pengeluarannya
"""

segmentasi_pelanggan = data_customer[["CustomerID","Country","Quantity","Pengeluaran"]]
segmentasi_pelanggan = segmentasi_pelanggan.groupby('CustomerID').sum('Pengeluaran')
segmentasi_pelanggan = segmentasi_pelanggan.sort_values('Pengeluaran', ascending=False)

segmentasi_pelanggan['percentile'] = pd.qcut(segmentasi_pelanggan['Pengeluaran'], q=4, labels=False)
grouped = segmentasi_pelanggan.groupby('percentile')

# print the grouped dataframe
for name, group in grouped:
    print(f"Percentile group {name}:")
    print(group)

segmentasi_pelanggan
#segmentasi_pelanggan.to_csv("segmentasipelanggan.csv")

"""### B. Segmentasi Negara berdasarkan Jumlah Pengeluarannya"""

segmentasi_negara = data_customer[["Country","Quantity","Pengeluaran"]]
segmentasi_negara = segmentasi_negara.groupby('Country').sum('Pengeluaran')
segmentasi_negara = segmentasi_negara.sort_values('Pengeluaran', ascending=False)

segmentasi_negara['percentile'] = pd.qcut(segmentasi_negara['Pengeluaran'], q=4, labels=False)
grouped = segmentasi_negara.groupby('percentile')

# print the grouped dataframe
for name, group in grouped:
    print(f"Percentile group {name}:")
    print(group)

segmentasi_negara
#segmentasi_negara.to_csv("segmentasinegara.csv")

"""### 3. Tren Penjualan Musiman"""

# RUN SEKALI AJA UNTUK MENGHAPUS JAM DARI INVOICE DATE
data_penjualan['InvoiceDate'] = data_penjualan['InvoiceDate'].dt.strftime('%m/%d/%Y')
data_penjualan

tren_penjualan = data_penjualan[["Pendapatan","Country","InvoiceDate"]]
tren_penjualan['InvoiceDate'] = pd.to_datetime(tren_penjualan['InvoiceDate'])

tren_penjualan = tren_penjualan.groupby('InvoiceDate').sum().reset_index()
#tren_penjualan['InvoiceDate'] = pd.to_datetime(tren_penjualan['InvoiceDate'])
tren_penjualan.sort_values(by='InvoiceDate', ascending = True, inplace = True)
tren_penjualan

tren_penjualan.to_csv("trenpenjualan.csv")

!pip install holidays
import holidays

uk_holidays = holidays.UK(subdiv="England", years=range(2009, 2011))
for key, val in sorted(uk_holidays.items()):
    print(key, val)

tren_penjualan["Holiday traffic"] = tren_penjualan["Pendapatan"][tren_penjualan["InvoiceDate"].apply(lambda d: d in uk_holidays)]

ax = tren_penjualan.plot(x="InvoiceDate", y=["Pendapatan", "Holiday traffic"], style=["-", "o"])

#uk_holidays = holidays.UK(subdiv="England")
#data_penjualan[data_penjualan["InvoiceDate"].apply(lambda d: d in uk_holidays)]

"""Berdasarkan gambar grafik di atas, dapat disimpulkan bahwa selama periode 2009-2011:
- Tidak dapat transaksi pada hari libur nasional UK.
- Penjualan tertinggi umumnya terdapat pada kuartal 4 (Q4) dan kuartal 1 (Q1) atau akhir sampai awal tahun.
- Penjualan mengalami penurunan paling banyak pada kuartal 2 (Q2).
"""